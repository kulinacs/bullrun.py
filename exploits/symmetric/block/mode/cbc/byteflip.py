# An attack on a CBC Cipher with a passed initialization vector
# As the ciphertext is decoded, the first block is decoded and XOR'd
# with the passed IV. By XORing the encryption IV, the plain text,
# and the payload, the decrypted plaintext can be altered to become the payload

import socket

# CBC Bitflipping Variables
payload = ";;;;;;;;;g:admin"
passin = "aaaaaaaaaaaaaa" # Set the first block to a known plaintext
plaintext = "u:" + passin

# Socket Variables
sock = socket.socket()
host = "XXX.XXX.XXX.XXX"
port = 0

# Socket Boringness
sock.connect((host, port))
sock.recv(512)
sock.send(passin + '\n')
sock.recv(512)
sock.recv(512)
sock.send('\n')
auth_token = sock.recv(512)
sock.recv(512)

# Split the IV from the Ciphertext
iv = auth_token[:32]
cipher = auth_token[32:]

# XOR the payload and the plaintext to geneate the injection
inject = int(payload.encode('hex'), 16) ^ int(plaintext.encode('hex'), 16)

# XOR the injection with the IV
newIV = hex(int(iv, 16) ^ inject)[2:]
if newIV[-1] == 'L':
    iv = iv[:-1]

# Send the modified auth_token
encoded = str(iv) + str(cipher)
sock.send(encoded + '\n')
print sock.recv(512)
